{"ast":null,"code":"import _classCallCheck from \"/home/emanuel/Desktop/ReactLearning/articlesreact/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/emanuel/Desktop/ReactLearning/articlesreact/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/emanuel/Desktop/ReactLearning/articlesreact/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/emanuel/Desktop/ReactLearning/articlesreact/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/emanuel/Desktop/ReactLearning/articlesreact/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/emanuel/Desktop/ReactLearning/articlesreact/src/js/components/commentData.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchComment as _fetchComment } from \"../actions/commentData\";\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    commentInfo: state.commentInfo\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    // deleteComment: comment => dispatch(deleteComment(comment)),\n    fetchComment: function fetchComment(comment) {\n      return dispatch(_fetchComment(comment));\n    }\n  };\n};\n\nvar ConnectedList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ConnectedList, _Component);\n\n  function ConnectedList() {\n    _classCallCheck(this, ConnectedList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ConnectedList).call(this)); // this.deleteThisComment = this.deleteThisComment.bind(this);\n  } // deleteThisComment(comment){\n  //   console.log(comment);\n  //   this.props.deleteComment(comment);\n  // }\n\n\n  _createClass(ConnectedList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //chamada inicial para ir buscar o comentario do ID\n      var id = this.props.match.params.id;\n      this.props.fetchComment({\n        type: \"FETCH_COMMENT\",\n        comment: id\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var comment = this.props.commentInfo.commentInfo;\n      console.log(comment);\n\n      if (comment.user) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, \"Coment\\xE1rio: \", comment.commentText), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, \"Autor do coment\\xE1rio: \", comment.user.name), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn btn-danger btn-lg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, \"Eliminar o coment\\xE1rio\")));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, \"Loading....\");\n      }\n    }\n  }]);\n\n  return ConnectedList;\n}(Component);\n\nvar List = connect(mapStateToProps, mapDispatchToProps)(ConnectedList);\nexport default List;","map":{"version":3,"sources":["/home/emanuel/Desktop/ReactLearning/articlesreact/src/js/components/commentData.js"],"names":["React","Component","connect","fetchComment","mapStateToProps","state","commentInfo","mapDispatchToProps","dispatch","comment","ConnectedList","id","props","match","params","type","console","log","user","commentText","name","List"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAY,IAAZA,aAAT,QAA6B,wBAA7B;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAE/B,SAAO;AAAEC,IAAAA,WAAW,EAAED,KAAK,CAACC;AAArB,GAAP;AACD,CAHD;;AAKA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACrC,SAAO;AACL;AACAL,IAAAA,YAAY,EAAE,sBAAAM,OAAO;AAAA,aAAID,QAAQ,CAACL,aAAY,CAACM,OAAD,CAAb,CAAZ;AAAA;AAFhB,GAAP;AAID,CALD;;IAOMC,a;;;;;AAEJ,2BAAa;AAAA;;AAAA,wFAEX;AACD,G,CAED;AACA;AACA;AACA;;;;;wCAEmB;AACjB;AACA,UAAMC,EAAE,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,EAAnC;AAEA,WAAKC,KAAL,CAAWT,YAAX,CAAwB;AAAEY,QAAAA,IAAI,EAAE,eAAR;AAAyBN,QAAAA,OAAO,EAAEE;AAAlC,OAAxB;AAED;;;6BAEO;AACN,UAAMF,OAAO,GAAG,KAAKG,KAAL,CAAWN,WAAX,CAAuBA,WAAvC;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYR,OAAZ;;AACA,UAAGA,OAAO,CAACS,IAAX,EAAgB;AAChB,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAkBT,OAAO,CAACU,WAA1B,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAA2BV,OAAO,CAACS,IAAR,CAAaE,IAAxC,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAQ,UAAA,SAAS,EAAC,uBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADF,CAHF,CADF;AASD,OAVC,MAUG;AACH,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF;AAGD;AACA;;;;EAtCyBnB,S;;AAyC5B,IAAMoB,IAAI,GAAGnB,OAAO,CAACE,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CG,aAA7C,CAAb;AACA,eAAeW,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchComment } from \"../actions/commentData\";\n\nconst mapStateToProps = state => {\n\n  return { commentInfo: state.commentInfo };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // deleteComment: comment => dispatch(deleteComment(comment)),\n    fetchComment: comment => dispatch(fetchComment(comment)),\n  };\n};\n\nclass ConnectedList extends Component{\n\n  constructor(){\n    super();\n    // this.deleteThisComment = this.deleteThisComment.bind(this);\n  }\n\n  // deleteThisComment(comment){\n  //   console.log(comment);\n  //   this.props.deleteComment(comment);\n  // }\n\n  componentDidMount(){\n    //chamada inicial para ir buscar o comentario do ID\n    const id = this.props.match.params.id;\n\n    this.props.fetchComment({ type: \"FETCH_COMMENT\", comment: id });\n\n  }\n\n  render(){\n    const comment = this.props.commentInfo.commentInfo;\n    console.log(comment);\n    if(comment.user){\n    return(\n      <div>\n        <div>Comentário: {comment.commentText}</div>\n        <div>Autor do comentário: {comment.user.name}</div>\n        <div>\n          <button className=\"btn btn-danger btn-lg\">Eliminar o comentário</button>\n        </div>\n      </div>\n    )\n  }else{\n    return(\n      <div>Loading....</div>\n    )\n  }\n  }\n}\n\nconst List = connect(mapStateToProps, mapDispatchToProps)(ConnectedList);\nexport default List;\n"]},"metadata":{},"sourceType":"module"}