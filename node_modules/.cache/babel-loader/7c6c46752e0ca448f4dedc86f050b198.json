{"ast":null,"code":"import _regeneratorRuntime from \"/home/emanuel/Desktop/ReactLearning/articlesreact/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchComment),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(mySagaCommentDetail);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { FETCH_COMMENT, COMMENT_FETCH_SUCCESS, COMMENT_FETCH_ERROR } from '../constants/action-types-comments';\nimport { ENDPOINTCOMMENT } from '../constants/comment-services';\n\nfunction fetchDetail(id) {\n  console.log(id);\n  return fetch('http://tdi-api.test:8080/api/comment/' + id).then(function (response) {\n    return response.json();\n  });\n}\n\nfunction fetchComment(action) {\n  var id, comment;\n  return _regeneratorRuntime.wrap(function fetchComment$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = action.payload.comment;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(fetchDetail, id);\n\n        case 4:\n          comment = _context.sent;\n          _context.next = 7;\n          return put({\n            type: COMMENT_FETCH_SUCCESS,\n            payload: comment\n          });\n\n        case 7:\n          console.log('success try catch of one comment');\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          console.log(_context.t0);\n          _context.next = 15;\n          return put({\n            type: COMMENT_FETCH_ERROR,\n            message: _context.t0.message\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[1, 10]]);\n}\n\nfunction mySagaCommentDetail() {\n  return _regeneratorRuntime.wrap(function mySagaCommentDetail$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log('comment saga init of one comment');\n          _context2.next = 3;\n          return takeLatest(FETCH_COMMENT, fetchComment);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nexport default mySagaCommentDetail;","map":{"version":3,"sources":["/home/emanuel/Desktop/ReactLearning/articlesreact/src/js/sagas/commentDetail.js"],"names":["fetchComment","mySagaCommentDetail","call","put","takeLatest","FETCH_COMMENT","COMMENT_FETCH_SUCCESS","COMMENT_FETCH_ERROR","ENDPOINTCOMMENT","fetchDetail","id","console","log","fetch","then","response","json","action","payload","comment","type","message"],"mappings":";;;;yBASUA,Y;;;yBAYAC,mB;;AArBV,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SAASC,aAAT,EAAwBC,qBAAxB,EAA+CC,mBAA/C,QAA0E,oCAA1E;AACC,SAASC,eAAT,QAAgC,+BAAhC;;AAED,SAASC,WAAT,CAAqBC,EAArB,EAAwB;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,SAAOG,KAAK,CAAC,0CAAwCH,EAAzC,CAAL,CAAkDI,IAAlD,CAAuD,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,GAA/D,CAAP;AACD;;AAED,SAAUhB,YAAV,CAAuBiB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQP,UAAAA,EADR,GACaO,MAAM,CAACC,OAAP,CAAeC,OAD5B;AAAA;AAAA;AAGoB,iBAAMjB,IAAI,CAACO,WAAD,EAAcC,EAAd,CAAV;;AAHpB;AAGUS,UAAAA,OAHV;AAAA;AAII,iBAAMhB,GAAG,CAAC;AAACiB,YAAAA,IAAI,EAAEd,qBAAP;AAA8BY,YAAAA,OAAO,EAAEC;AAAvC,WAAD,CAAT;;AAJJ;AAKIR,UAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AALJ;AAAA;;AAAA;AAAA;AAAA;AAOID,UAAAA,OAAO,CAACC,GAAR;AAPJ;AAQI,iBAAMT,GAAG,CAAC;AAACiB,YAAAA,IAAI,EAAEb,mBAAP;AAA4Bc,YAAAA,OAAO,EAAE,YAAEA;AAAvC,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAUpB,mBAAV;AAAA;AAAA;AAAA;AAAA;AACEU,UAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AADF;AAEE,iBAAMR,UAAU,CAACC,aAAD,EAAgBL,YAAhB,CAAhB;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAeC,mBAAf","sourcesContent":["import { call, put, takeLatest } from 'redux-saga/effects';\nimport { FETCH_COMMENT, COMMENT_FETCH_SUCCESS, COMMENT_FETCH_ERROR } from '../constants/action-types-comments';\n import { ENDPOINTCOMMENT } from '../constants/comment-services';\n\nfunction fetchDetail(id){\n  console.log(id);\n  return fetch('http://tdi-api.test:8080/api/comment/'+id).then(response => response.json(), );\n}\n\nfunction* fetchComment(action){\n  const id = action.payload.comment;\n  try{\n    const comment = yield call(fetchDetail, id);\n    yield put({type: COMMENT_FETCH_SUCCESS, payload: comment});\n    console.log('success try catch of one comment');\n  } catch(e){\n    console.log(e);\n    yield put({type: COMMENT_FETCH_ERROR, message: e.message});\n  }\n}\n\nfunction* mySagaCommentDetail(){\n  console.log('comment saga init of one comment');\n  yield takeLatest(FETCH_COMMENT, fetchComment);\n}\n\nexport default mySagaCommentDetail;\n"]},"metadata":{},"sourceType":"module"}