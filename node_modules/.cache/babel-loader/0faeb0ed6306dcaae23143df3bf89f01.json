{"ast":null,"code":"import _toConsumableArray from \"/home/emanuel/Desktop/ReactLearning/articlesreact/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/*\n    Root Reducer - define a função a ser executada por cada \"action\"\n    calcula o \"state\" da aplicação consoante o \"action type\"\n\n    \"Reducers produce the state of the application.\"\n\n */\nimport { TOKEN_FETCH_SUCCEEDED } from \"../constants/action-types-auth\";\nvar initialState = []; // Criação do Reducer que vai gerir as operações relativas aos articles\n// um Reducer recebe sempre 2 parâmetros:\n// 1) o state atual\n// 2) a action\n\nvar authReducer = function authReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  // consoante a action irá executar uma operação diferente\n  switch (action.type) {\n    case TOKEN_FETCH_SUCCEEDED:\n      console.log('TOKEN FETCH SUCCEDED', action.payload);\n      return _toConsumableArray(state).concat([action.payload]);\n\n    default:\n      // devolver sempre o state atual, para o caso de nenhuma das ações acima corresponderem\n      return state;\n  }\n};\n\n;\nexport default authReducer;","map":{"version":3,"sources":["/home/emanuel/Desktop/ReactLearning/articlesreact/src/js/reducers/auth.js"],"names":["TOKEN_FETCH_SUCCEEDED","initialState","authReducer","state","action","type","console","log","payload"],"mappings":";;AAAA;;;;;;;AAQA,SAAQA,qBAAR,QAAoC,gCAApC;AAEA,IAAMC,YAAY,GAAG,EAArB,C,CAEA;AACA;AACA;AACA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAElD;AACA,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKL,qBAAL;AACIM,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCH,MAAM,CAACI,OAA3C;AACA,gCAAYL,KAAZ,UAAoBC,MAAM,CAACI,OAA3B;;AACJ;AACI;AACA,aAAOL,KAAP;AAPR;AASH,CAZD;;AAYE;AAEF,eAAeD,WAAf","sourcesContent":["/*\n    Root Reducer - define a função a ser executada por cada \"action\"\n    calcula o \"state\" da aplicação consoante o \"action type\"\n\n    \"Reducers produce the state of the application.\"\n\n */\n\nimport {TOKEN_FETCH_SUCCEEDED} from \"../constants/action-types-auth\";\n\nconst initialState = [];\n\n// Criação do Reducer que vai gerir as operações relativas aos articles\n// um Reducer recebe sempre 2 parâmetros:\n// 1) o state atual\n// 2) a action\nconst authReducer = (state = initialState, action) => {\n\n    // consoante a action irá executar uma operação diferente\n    switch (action.type) {\n\n        case TOKEN_FETCH_SUCCEEDED:\n            console.log('TOKEN FETCH SUCCEDED', action.payload);\n            return [ ...state,  action.payload ];\n        default:\n            // devolver sempre o state atual, para o caso de nenhuma das ações acima corresponderem\n            return state;\n    }\n};;\n\nexport default authReducer;\n"]},"metadata":{},"sourceType":"module"}